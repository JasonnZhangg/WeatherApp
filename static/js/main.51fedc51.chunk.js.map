{"version":3,"sources":["components/Tile.js","components/secrets.js","components/Body.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Tile","styles","this","props","isLongTile","weatherDes","Card","className","border","Body","Title","Math","round","weatherData","Subtitle","date","Text","Component","constants","state","temp","weatherDescription","dates","num","isLong","navigator","geolocation","Promise","res","rej","getCurrentPosition","apiKey","apiURL","getLocation","location","coords","latitude","longitude","fetch","then","json","data","weatherList","list","i","length","console","log","dt_txt","includes","push","x","main","weather","dateStr","substring","setState","catch","Container","Row","Col","style","textAlign","paddingBottom","renderTile","NavBar","Navbar","bg","expand","color","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51fedc51.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\n\r\n\r\nclass Tile extends Component {\r\n    render() { \r\n        var styles = (this.props.isLongTile) ? \"longTile\" : \"tile\";\r\n        \r\n        styles += \" tile\" + this.props.weatherDes + \" commonTileClass\";\r\n\r\n        return ( \r\n            <Card className={styles} border=\"dark\">\r\n                <Card.Body>\r\n                    <Card.Title><p>{Math.round(this.props.weatherData)} &#8451;</p></Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.props.date}</Card.Subtitle>\r\n                    <Card.Text className='tileText'>\r\n                        {this.props.weatherDes} \r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Tile;","var constants = {\r\n    apiKey: '16e4baeda963795c429f5701555bd5bf',\r\n};\r\n\r\nexport {constants}","import React from 'react';\r\nimport {Component} from 'react';\r\nimport './components.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport Tile from './Tile';\r\nimport {constants} from './secrets.js';\r\n\r\nclass Body extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            temp: [],\r\n            weatherDescription: [],\r\n            dates: []\r\n        }\r\n    }\r\n\r\n    renderTile(num){\r\n        var isLong = (num === 0) ? false : true;\r\n        return (\r\n            <Tile isLongTile={isLong} weatherData={Math.round(this.state.temp[num])} weatherDes={this.state.weatherDescription[num]} date={this.state.dates[num]}/>\r\n        );\r\n    }\r\n\r\n    // get current user location\r\n    getLocation(){ \r\n        if (navigator.geolocation) {\r\n            // return location as in JSON\r\n            return new Promise((res, rej) => {\r\n                navigator.geolocation.getCurrentPosition(res, rej)\r\n            });\r\n        }\r\n        return 'Toronto';\r\n    }\r\n\r\n    // api call function\r\n    async componentDidMount() {\r\n        const apiKey = constants.apiKey;\r\n        var apiURL = 'https://api.openweathermap.org/data/2.5/forecast?'; \r\n        var location = await this.getLocation();\r\n        \r\n        apiURL += (location === 'Toronto') ? 'q=Toronto' : 'lat=' + location.coords.latitude + '&lon=' + location.coords.longitude;\r\n\r\n        // get weather data from the api\r\n        fetch( apiURL + '&units=metric&appid=' + apiKey)\r\n    \r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            // TODO: make a list that contains all the weather data then set that to this.state.weather\r\n            var weatherList = [];\r\n            var list = data.list;\r\n            \r\n            for (var i = 0; i < list.length; i++){\r\n                console.log(list[i]);\r\n                var str = list[i].dt_txt;\r\n                if (str.includes('12:00:00')){\r\n                    weatherList.push(list[i]);\r\n                }\r\n            }\r\n\r\n            var temp = [];\r\n            var weatherDescription = [];\r\n            var dates = [];\r\n\r\n            for (var x = 0; x < weatherList.length; x++){\r\n                temp.push(weatherList[x].main.temp);\r\n                weatherDescription.push(weatherList[x].weather[0].main);\r\n                var dateStr = weatherList[x].dt_txt;\r\n                dateStr = dateStr.substring(0,10);\r\n                dates.push(dateStr);\r\n            }\r\n     \r\n\r\n            // console.log(temp);\r\n            // console.log(weatherDescription);\r\n            // console.log(dates);\r\n            \r\n            this.setState({\r\n                temp: temp,\r\n                weatherDescription: weatherDescription,\r\n                dates: dates           \r\n            });\r\n\r\n        })\r\n        .catch(console.log)\r\n    }\r\n\r\n    \r\n\r\n    render() { \r\n        var styles = \"body \";\r\n        styles += (this.state.weatherDescription[0] === null) ? \"na\" : this.state.weatherDescription[0];\r\n        styles += \" commonBgdClass\";\r\n        console.log(styles);\r\n\r\n        return (  \r\n            <div className={styles}>\r\n                <Container >\r\n                    <Row >\r\n                        <Col style={{textAlign: \"center\", paddingBottom: \"3%\"}}>\r\n                            {this.renderTile(0)}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {this.renderTile(1)}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.renderTile(2)}\r\n                        </Col>\r\n                   \r\n                        <Col>\r\n                            {this.renderTile(3)}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.renderTile(4)}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.renderTile(5)}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Body;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './components.css'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\n\r\nclass NavBar extends Component {\r\n    render() { \r\n        return ( \r\n            <Navbar bg=\"dark\" expand=\"lg\" style={{color: \"white\"}}>\r\n                <h4 >Today's Weather is</h4>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React from 'react';\r\nimport './App.css';\r\nimport Body from './components/Body';\r\nimport NavBar from './components/Navbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Body />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}